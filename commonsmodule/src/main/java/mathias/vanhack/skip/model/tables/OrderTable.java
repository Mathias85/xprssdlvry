/*
 * This file is generated by jOOQ.
 */
package mathias.vanhack.skip.model.tables;


import mathias.vanhack.skip.model.definitions.Indexes;
import mathias.vanhack.skip.model.definitions.Keys;
import mathias.vanhack.skip.model.definitions.Xprssdlvrydb;
import mathias.vanhack.skip.model.records.OrderRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OrderTable extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 2058360835;

    /**
     * The reference instance of <code>xprssdlvrydb.xd_order</code>
     */
    public static final OrderTable XD_ORDER = new OrderTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>xprssdlvrydb.xd_order.order_id</code>.
     */
    public final TableField<OrderRecord, Integer> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.date_created</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.user_id</code>.
     */
    public final TableField<OrderRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.rest_id</code>.
     */
    public final TableField<OrderRecord, Integer> REST_ID = createField("rest_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.order_status</code>.
     */
    public final TableField<OrderRecord, String> ORDER_STATUS = createField("order_status", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.total_price</code>.
     */
    public final TableField<OrderRecord, Double> TOTAL_PRICE = createField("total_price", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.payment_type</code>.
     */
    public final TableField<OrderRecord, String> PAYMENT_TYPE = createField("payment_type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_order.delivery_fee</code>.
     */
    public final TableField<OrderRecord, Double> DELIVERY_FEE = createField("delivery_fee", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>xprssdlvrydb.xd_order</code> table reference
     */
    public OrderTable() {
        this(DSL.name("xd_order"), null);
    }

    /**
     * Create an aliased <code>xprssdlvrydb.xd_order</code> table reference
     */
    public OrderTable(String alias) {
        this(DSL.name(alias), XD_ORDER);
    }

    /**
     * Create an aliased <code>xprssdlvrydb.xd_order</code> table reference
     */
    public OrderTable(Name alias) {
        this(alias, XD_ORDER);
    }

    private OrderTable(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderTable(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderTable(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, XD_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xprssdlvrydb.XPRSSDLVRYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XD_ORDER_PRIMARY, Indexes.XD_ORDER_XD_ORDER_ORDER_ID_UINDEX, Indexes.XD_ORDER_XD_ORDER_XD_RESTAURANT_REST_ID_FK, Indexes.XD_ORDER_XD_ORDER_XD_USER_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_XD_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_XD_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.KEY_XD_ORDER_PRIMARY, Keys.KEY_XD_ORDER_XD_ORDER_ORDER_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.XD_ORDER_XD_USER_USER_ID_FK, Keys.XD_ORDER_XD_RESTAURANT_REST_ID_FK);
    }

    public UserTable xdUser() {
        return new UserTable(this, Keys.XD_ORDER_XD_USER_USER_ID_FK);
    }

    public RestaurantTable xdRestaurant() {
        return new RestaurantTable(this, Keys.XD_ORDER_XD_RESTAURANT_REST_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderTable as(String alias) {
        return new OrderTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderTable as(Name alias) {
        return new OrderTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderTable rename(String name) {
        return new OrderTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderTable rename(Name name) {
        return new OrderTable(name, null);
    }
}
