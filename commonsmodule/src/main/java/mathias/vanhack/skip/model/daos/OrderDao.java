/*
 * This file is generated by jOOQ.
 */
package mathias.vanhack.skip.model.daos;


import mathias.vanhack.skip.model.pojos.Order;
import mathias.vanhack.skip.model.records.OrderRecord;
import mathias.vanhack.skip.model.tables.OrderTable;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class OrderDao extends DAOImpl<OrderRecord, Order, Integer> {

    /**
     * Create a new OrderDao without any configuration
     */
    public OrderDao() {
        super(OrderTable.XD_ORDER, Order.class);
    }

    /**
     * Create a new OrderDao with an attached configuration
     */
    @Autowired
    public OrderDao(Configuration configuration) {
        super(OrderTable.XD_ORDER, Order.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(Order object) {
        return object.getOrderId();
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<Order> fetchByIdTable(Integer... values) {
        return fetch(OrderTable.XD_ORDER.ORDER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    public Order fetchOneByIdTable(Integer value) {
        return fetchOne(OrderTable.XD_ORDER.ORDER_ID, value);
    }

    /**
     * Fetch records that have <code>date_created IN (values)</code>
     */
    public List<Order> fetchByCreatedTable(LocalDateTime... values) {
        return fetch(OrderTable.XD_ORDER.DATE_CREATED, values);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<Order> fetchByUserIdTable(Integer... values) {
        return fetch(OrderTable.XD_ORDER.USER_ID, values);
    }

    /**
     * Fetch records that have <code>rest_id IN (values)</code>
     */
    public List<Order> fetchByRestIdTable(Integer... values) {
        return fetch(OrderTable.XD_ORDER.REST_ID, values);
    }

    /**
     * Fetch records that have <code>order_status IN (values)</code>
     */
    public List<Order> fetchByStatusTable(String... values) {
        return fetch(OrderTable.XD_ORDER.ORDER_STATUS, values);
    }

    /**
     * Fetch records that have <code>total_price IN (values)</code>
     */
    public List<Order> fetchByPriceTable(Double... values) {
        return fetch(OrderTable.XD_ORDER.TOTAL_PRICE, values);
    }

    /**
     * Fetch records that have <code>payment_type IN (values)</code>
     */
    public List<Order> fetchByTypeTable(String... values) {
        return fetch(OrderTable.XD_ORDER.PAYMENT_TYPE, values);
    }

    /**
     * Fetch records that have <code>delivery_fee IN (values)</code>
     */
    public List<Order> fetchByFeeTable(Double... values) {
        return fetch(OrderTable.XD_ORDER.DELIVERY_FEE, values);
    }
}
