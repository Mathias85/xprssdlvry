/*
 * This file is generated by jOOQ.
 */
package mathias.vanhack.skip.model.tables;


import mathias.vanhack.skip.model.definitions.Indexes;
import mathias.vanhack.skip.model.definitions.Keys;
import mathias.vanhack.skip.model.definitions.Xprssdlvrydb;
import mathias.vanhack.skip.model.records.UserRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserTable extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -1119455396;

    /**
     * The reference instance of <code>xprssdlvrydb.xd_user</code>
     */
    public static final UserTable XD_USER = new UserTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>xprssdlvrydb.xd_user.user_id</code>.
     */
    public final TableField<UserRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_user.username</code>.
     */
    public final TableField<UserRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_user.user_since</code>.
     */
    public final TableField<UserRecord, LocalDateTime> USER_SINCE = createField("user_since", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>xprssdlvrydb.xd_user.auth_provider</code>.
     */
    public final TableField<UserRecord, String> AUTH_PROVIDER = createField("auth_provider", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>xprssdlvrydb.xd_user</code> table reference
     */
    public UserTable() {
        this(DSL.name("xd_user"), null);
    }

    /**
     * Create an aliased <code>xprssdlvrydb.xd_user</code> table reference
     */
    public UserTable(String alias) {
        this(DSL.name(alias), XD_USER);
    }

    /**
     * Create an aliased <code>xprssdlvrydb.xd_user</code> table reference
     */
    public UserTable(Name alias) {
        this(alias, XD_USER);
    }

    private UserTable(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTable(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserTable(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, XD_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xprssdlvrydb.XPRSSDLVRYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.XD_USER_PRIMARY, Indexes.XD_USER_XD_USER_USER_ID_UINDEX, Indexes.XD_USER_XD_USER_USERNAME_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_XD_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_XD_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_XD_USER_PRIMARY, Keys.KEY_XD_USER_XD_USER_USER_ID_UINDEX, Keys.KEY_XD_USER_XD_USER_USERNAME_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTable as(String alias) {
        return new UserTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTable as(Name alias) {
        return new UserTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTable rename(String name) {
        return new UserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTable rename(Name name) {
        return new UserTable(name, null);
    }
}
